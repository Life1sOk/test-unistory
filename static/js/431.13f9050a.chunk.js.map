{"version":3,"file":"static/js/431.13f9050a.chunk.js","mappings":"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","sources":["components/ellipse-progress/ellipse-progress.style.js","components/ellipse-progress/ellipse-progress.component.tsx","blocks/planet/planet.style.js","blocks/planet/planet.block.tsx","components/user-field/user-field.style.js","components/user-field/user-field.component.tsx","blocks/profile/profile.style.js","blocks/profile/profile.block.tsx","pages/profile/profile.style.js","pages/profile/profile.page.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const EllipseAnimationWrapper = styled.div`\n    width: 486px;\n    height: 486px;\n    z-index: 2;\n\n    position: absolute;\n    left: 23px;\n    top: 23px;\n`;\n\nexport const Dot = styled.div`\n    width: 6px;\n    height: 6px;\n    background-color: var(--orange);\n    border-radius: 50%;\n    z-index: 4;\n    \n    position: absolute;\n`;\n\nexport const DotBox = styled.div`\n    padding: 8px 12px;\n    width: 80px;\n    max-height: 30px;\n    background-color: var(--white);\n    border-radius: 15px;\n    color: var(--main-background);\n    z-index: 4;\n    \n    position: absolute;\n    left: 50%;\n    top: -14px;\n    transform: translateX(calc(-50% - 21.5px)); \n\n    font-weight: 700;\n    font-size: 14px;\n\n    display: flex;\n    align-items: center;\n    flex-shrink: 0;\n    gap: 8px;\n\n    &::after {\n        display: block;\n        content: '';\n        width: 12px;\n        height: 12px;\n        border-radius: 50%;\n        z-index: 3;\n\n        background-color: var(--white);\n        box-shadow: -2px -2px 6px rgba(50, 50, 50, 0.25), 2px 2px 6px rgba(50, 50, 50, 0.25);\n    }\n`;","import { useEffect, useState } from \"react\";\n\nimport { useAppSelector } from \"../../app-redux/hooks\";\n\nimport { EllipseAnimationWrapper, Dot, DotBox } from './ellipse-progress.style';\n\ninterface IProgress {\n    size: number,\n    strokeWidth: number,\n    percentage: number,\n    color: string,\n    pointBox?: boolean,\n    animation?: boolean,\n};\n\nconst EllipseProgress = ({ size, strokeWidth, percentage, color, pointBox, animation }: IProgress) => {\n    // State of all dots - base on that we display them;\n    const [oneDot, setOneDot] = useState(false);\n    const [twoDot, setTwoDot] = useState(false);\n    const [threeDot, setThreeDot] = useState(false);\n    // State of circle \n    const [progress, setProgress] = useState(0);\n\n    // Calculate circle's animation;\n    const viewBox = `0 0 ${size} ${size}`;\n    const radius = (size - strokeWidth) / 2;\n    const circumference = radius * Math.PI * 2;\n    const dash = (progress * circumference) / 100;\n    const noAnimation = (50 * circumference) / 100;\n\n    // Window extention state - \n    const extentionIsOpen = useAppSelector((state) => state.extention.extentionReady);\n\n    useEffect(() => {\n        // Binding to extension-window so that the animation does not start if the window is open\n        if (!extentionIsOpen) {\n            setProgress(percentage);\n            // Display dots while transition is running\n            setOneDot(true);\n            setTimeout(() => setTwoDot(true), 1500);\n            setTimeout(() => setThreeDot(true), 3000);\n        }\n    }, [percentage, extentionIsOpen]);\n\n    // If we dont want animation - display all dots and change CIRCLE - strokeDashharray to the noAnimation variable;\n    useEffect(() => {\n        if (!animation) {\n            setOneDot(true);\n            setTwoDot(true);\n            setThreeDot(true);\n        }\n    }, [animation])\n\n    return (\n        <EllipseAnimationWrapper>\n            <svg width={size} height={size} viewBox={viewBox}>\n                <circle\n                    fill=\"none\"\n                    stroke={color}\n                    cx={size / 2}\n                    cy={size / 2}\n                    r={radius}\n                    strokeWidth={`${strokeWidth}px`}\n                    transform={`rotate(-90 ${size / 2} ${size / 2})`}\n                    strokeDasharray={!animation ? `${noAnimation}` : `${dash} ${circumference - dash}`}\n                    strokeLinecap=\"round\"\n                    style={{ transition: `all 3s linear` }}\n                />\n            </svg>\n            {\n                pointBox &&\n                <DotBox>\n                    <span>Q1 2022</span>\n                </DotBox>\n            }\n            {oneDot &&\n                <Dot style={{ top: '0', left: '50%', transform: 'translate(-50%, -2.5px)' }} />}\n            {twoDot &&\n                <Dot style={{ top: '50%', right: '0', transform: 'translate(2.5px, -50%)' }} />}\n            {threeDot &&\n                <Dot style={{ bottom: '0', left: '50%', transform: 'translate(-50%, 2.5px)' }} />}\n        </EllipseAnimationWrapper>\n    );\n};\n\nexport default EllipseProgress;\n","import styled from 'styled-components';\n\nimport planetImage from '../../assets/planet.png';\n\nexport const PlanetStyle = styled.div`\n    position: absolute;\n    top: ${({ top }) => top ? `${top}px` : 'none'};\n    left: ${({ left }) => left ? `${left}px` : 'none'};\n    right: ${({ right }) => right ? `${right}px` : 'none'};\n    bottom: ${({ bottom }) => bottom ? `${bottom}px` : 'none'};\n`;\n\nexport const PlanetAttractionWrapper = styled.div`\n    width: 532px;\n    height: 532px;\n    z-index: 29;\n    border-radius: 50%;\n\n    position: absolute;\n    left: 0px;\n    top: 0px;\n`;\n\nexport const PlanetImage = styled.div`\n    width: 320px;\n    height: 322px;\n\n    // Сохраняет форму картинки и создает 3д эффект\n    mask-image: url(${planetImage});\n    mask-size: contain;\n    mask-repeat: no-repeat;\n    mask-position: center;\n\n    background: url(${planetImage});\n    background-position: center;\n    background-size: cover;\n    background-repeat: no-repeat;\n    z-index: 18;\n    \n    position: absolute;\n    left: 106px;\n    top: 105px;\n`;\n\n// Все элипсы привязаны к основному Мэйн элипсуж, а сам Мейн к текущей секции //\nexport const EllipseOneMain = styled.div`\n    width: 532px;\n    height: 532px;\n    background-color: rgba(33, 33, 36, 1);\n    border-radius: 50%;\n\n    position: absolute;\n    left: 0px;\n    top: 0px;\n\n    &::before {\n        content: '';\n        width: 526px;\n        height: 526px;\n        border-radius: 50%;\n        background-color: rgba(23, 23, 25, 1);\n        filter: blur(11px);\n        z-index: 1;\n\n        position: absolute;\n        left: 3px;\n        top: 3px;\n    }\n`;\n\nexport const EllipseTwo = styled.div`\n    width: 446px;\n    height: 446px;\n    background-color: rgba(30, 30, 32, 1);\n    border-radius: 50%;\n    z-index: 3;\n    \n    position: absolute;\n    left: 43px;\n    top: 43px;\n`;\n\nexport const EllipseThree = styled.div`\n    width: 384px;\n    height: 384px;\n    border: 1px solid rgba(50, 50, 50, 1);\n    border-radius: 50%;\n    z-index: 3;\n\n    position: absolute;\n    left: 74px;\n    top: 74px;\n\n    &::after {\n        content: '';\n        width: 370px;\n        height: 370px;\n        border: 1px solid rgba(50, 50, 50, 1);\n        border-radius: 50%;\n        z-index: 3;\n        \n        position: absolute;\n        top: 7px;\n        left: 7px;\n    }\n`;","import { useRef } from 'react';\n\nimport EllipseProgress from '../../components/ellipse-progress/ellipse-progress.component';\n\nimport { PlanetStyle, PlanetImage, PlanetAttractionWrapper, EllipseOneMain, EllipseTwo, EllipseThree } from './planet.style';\n\ninterface IPlanet {\n    top?: number,\n    left?: number,\n    bottom?: number,\n    right?: number,\n    children?: JSX.Element | JSX.Element[];\n    pointBox?: boolean,\n    ellipse?: boolean,\n};\n\nconst Planet = ({ children, pointBox, top, left, right, bottom, ellipse }: IPlanet) => {\n    const planetRef = useRef<HTMLDivElement>();\n\n    const pointerEnterHandler = () => {\n        const planet = planetRef.current as any;\n        // As soon as we start the mouse, we create an animation\n        planet.style.transition = `transform 30s linear`;\n    };\n\n    const mouseMoveHandler = (event: MouseEvent) => {\n        const planet = planetRef.current as any;\n        // Planet coordinates along the X and Y axes relative to the client\n        let planetX = (planet.getBoundingClientRect()?.left) + (planet.clientWidth / 2);\n        let planetY = (planet.getBoundingClientRect()?.top) + (planet.clientHeight / 2);\n        // X and Y coordinates of the current cursor relative to the client\n        let cursoreX = event.clientX;\n        let cursoreY = event.clientY;\n        //  Finding the difference between coordinates\n        let transX = (planetX - cursoreX) * -1;\n        let transY = (planetY - cursoreY) * -1;\n        // Change the planet's position based on this data from the top\n        planet.style.transform = `translate(${transX}px,${transY}px)`;\n        // Target child's - Put text 'inside' planet;\n        const childrensText = [planet.children[0], planet.children[1]]\n        // Change the text's position based on the planet ( opposite to the planet move );\n        childrensText.forEach(child => {\n            if (child) {\n                child.style.transition = 'transform 30s linear';\n                child.style.transform = `translate(${-transX}px,${-transY}px)`;\n            }\n        })\n    };\n\n    const pointLeaveHandler = () => {\n        const planet = planetRef.current as any;\n        // When cursor leave - back default planet's setting\n        planet.style.transition = 'transform 3s linear';\n        planet.style.transform = `translate(0px, 0px)`;\n        // Target child's - Put text 'inside' planet;\n        const childrensText = [planet.children[0], planet.children[1]]\n        // Back text too\n        childrensText.forEach(child => {\n            if (child) {\n                child.style.transition = 'transform 3s linear';\n                child.style.transform = `translate(0px, 0px)`;\n            }\n        })\n    };\n\n    return (\n        <PlanetStyle top={top} left={left} right={right} bottom={bottom}>\n            <PlanetImage ref={planetRef}>\n                {children ? children : null}\n            </PlanetImage>\n            <PlanetAttractionWrapper\n                onPointerLeave={pointLeaveHandler}\n                onPointerEnter={pointerEnterHandler}\n                onMouseMove={mouseMoveHandler}\n            />\n            <EllipseOneMain>\n                <EllipseTwo />\n                <EllipseThree />\n                <EllipseProgress\n                    size={486}\n                    strokeWidth={1}\n                    percentage={50}\n                    color=\"rgba(231, 86, 38, 1)\"\n                    pointBox={pointBox}\n                    animation={ellipse}\n                />\n            </EllipseOneMain>\n        </PlanetStyle >\n    )\n};\n\nexport default Planet;","import styled from 'styled-components';\n\nexport const UserFieldStyle = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 8px;\n`;\n\nexport const FieldLabel = styled.span`\n    height: 25px;\n    font-weight: 700;\n    font-size: 24px;\n`;\n\nexport const FieldText = styled.span`\n    color: var(--orange);\n    font-weight: 700;\n    font-size: 32px;\n`;","import { UserFieldStyle, FieldLabel, FieldText } from './user-field.style';\n\ninterface IUserField {\n    label: string,\n    text: string,\n};\n\nconst UserField = ({ label, text }: IUserField) => {\n    return (\n        <UserFieldStyle>\n            <FieldLabel>{label}</FieldLabel>\n            <FieldText>{text}</FieldText>\n        </UserFieldStyle>\n    )\n};\n\nexport default UserField;","import styled from 'styled-components';\n\nexport const ProfileStyle = styled.div`\n    margin-top: 168px;\n\n    display: flex;\n    flex-direction: column;\n    gap: 22px;\n`;\n\nexport const ProfileStyleTitle = styled.h3`\n    margin-bottom: 26px;\n    font-size: 48px;\n    text-align: left;\n`;","import { useAppSelector } from '../../app-redux/hooks';\n\nimport UserField from '../../components/user-field/user-field.component';\nimport { ProfileStyle, ProfileStyleTitle } from './profile.style';\n\nconst Profile = () => {\n    const user = useAppSelector((state) => state.participant.current);\n\n    return (\n        <ProfileStyle>\n            <ProfileStyleTitle>PERSONAL DATA</ProfileStyleTitle>\n            <UserField label='NAME' text={user.username} />\n            <UserField label='EMAIL' text={user.email} />\n            <UserField label='WALLET' text={user.address} />\n        </ProfileStyle>\n    )\n};\n\nexport default Profile;","import styled from 'styled-components';\n\nexport const ProfilePageStyle = styled.div`\n    position: relative;\n\n    width: 100%;\n    height: 100%;\n    padding-left: 64px;\n`;","import Profile from '../../blocks/profile/profile.block';\nimport Planet from '../../blocks/planet/planet.block';\n\nimport { ProfilePageStyle } from './profile.style';\n\nconst ProfilePage = () => {\n    return (\n        <ProfilePageStyle>\n            <Profile />\n            <Planet pointBox={false} top={-107} left={1113} ellipse={false} />\n        </ProfilePageStyle>\n    )\n};\n\nexport default ProfilePage;"],"names":["EllipseAnimationWrapper","styled","_templateObject","_taggedTemplateLiteral","Dot","_templateObject2","DotBox","_templateObject3","_ref","size","strokeWidth","percentage","color","pointBox","animation","_useState","useState","_useState2","_slicedToArray","oneDot","setOneDot","_useState3","_useState4","twoDot","setTwoDot","_useState5","_useState6","threeDot","setThreeDot","_useState7","_useState8","progress","setProgress","viewBox","concat","radius","circumference","Math","PI","dash","noAnimation","extentionIsOpen","useAppSelector","state","extention","extentionReady","useEffect","setTimeout","_jsxs","children","_jsx","width","height","fill","stroke","cx","cy","r","transform","strokeDasharray","strokeLinecap","style","transition","top","left","right","bottom","PlanetStyle","_ref2","_ref3","_ref4","PlanetAttractionWrapper","PlanetImage","planetImage","EllipseOneMain","_templateObject4","EllipseTwo","_templateObject5","EllipseThree","_templateObject6","ellipse","planetRef","useRef","ref","onPointerLeave","planet","current","forEach","child","onPointerEnter","onMouseMove","event","_planet$getBoundingCl","_planet$getBoundingCl2","planetX","getBoundingClientRect","clientWidth","planetY","clientHeight","cursoreX","clientX","cursoreY","clientY","transX","transY","EllipseProgress","UserFieldStyle","FieldLabel","FieldText","label","text","ProfileStyle","ProfileStyleTitle","user","participant","UserField","username","email","address","ProfilePageStyle","Profile","Planet"],"sourceRoot":""}